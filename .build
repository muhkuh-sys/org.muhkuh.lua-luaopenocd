#! /bin/bash
set -e

# Check the number of parameters.
if [ $# -ne 3 ]
then
	echo "The script needs 3 parameter:"
	echo "  1) the distribution ID"
	echo "  2) the distribution version (can be an empty string '')"
	echo "  3) the CPU architecture"
	exit -1
fi

JONCHKI_DISTRIBUTION_ID=$1
JONCHKI_DISTRIBUTION_VERSION=$2
JONCHKI_CPU_ARCHITECTURE=$3

if [ "${JONCHKI_DISTRIBUTION_VERSION}" == "" ]
then
	JONCHKI_PLATFORM_ID="${JONCHKI_DISTRIBUTION_ID}_${JONCHKI_CPU_ARCHITECTURE}"
else
	JONCHKI_PLATFORM_ID="${JONCHKI_DISTRIBUTION_ID}_${JONCHKI_DISTRIBUTION_VERSION}_${JONCHKI_CPU_ARCHITECTURE}"
fi
echo "Building jonchki for ${JONCHKI_PLATFORM_ID}"


JONCHKI_VERSION=0.0.3.1
JONCHKI_VERBOSE=info

# Get the path to this script. Found here: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PRJ_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

if [ "${JONCHKI_DISTRIBUTION_ID}" == "ubuntu" ]; then
	if [ "${JONCHKI_CPU_ARCHITECTURE}" == "arm64" ]; then
		CMAKE_COMPILER="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
		CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=ubuntu -DJONCHKI_PLATFORM_DIST_VERSION=${JONCHKI_DISTRIBUTION_VERSION} -DJONCHKI_PLATFORM_CPU_ARCH=arm64"
		JONCHKI_SYSTEM="--distribution-id ubuntu --distribution-version ${JONCHKI_DISTRIBUTION_VERSION} --cpu-architecture arm64"
		TOOLS_PATH=${PATH}

	else
		CMAKE_COMPILER=""
		CMAKE_PLATFORM=""
		JONCHKI_SYSTEM=""
		TOOLS_PATH=${PATH}
	fi

elif [ "${JONCHKI_PLATFORM_ID}" == "windows_x86" ]; then
	CMAKE_COMPILER="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++ -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86"
	TOOLS_PATH=/usr/mingw-w64-i686/bin:${PATH}

elif [ "${JONCHKI_PLATFORM_ID}" == "windows_x86_64" ]; then
	CMAKE_COMPILER="-DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86_64"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86_64"
	TOOLS_PATH=/usr/mingw-w64-x86_64/bin:${PATH}

else
	echo "Unknown build target: ${JONCHKI_PLATFORM_ID}"
	exit -1
fi

BUILD_DIR=${PRJ_DIR}/build/${JONCHKI_PLATFORM_ID}
mkdir -p ${BUILD_DIR}
mkdir -p ${BUILD_DIR}/external
mkdir -p ${BUILD_DIR}/lua5.1/build_requirements
mkdir -p ${BUILD_DIR}/lua5.2/build_requirements
mkdir -p ${BUILD_DIR}/lua5.3/build_requirements


# Install jonchki.
python2.7 jonchki/jonchkihere.py --jonchki-version ${JONCHKI_VERSION} --local-archives ${PRJ_DIR}/jonchki/local_archives ${PRJ_DIR}/build
if [ -f ${PRJ_DIR}/build/.jonchki.cmd ]; then
	JONCHKI=$(<${PRJ_DIR}/build/.jonchki.cmd)
fi
if [ "${JONCHKI}" == "" ]; then
	echo "Failed to extract the jonchki command from the jonchkihere output."
	exit 1
fi


# Get the build requirements for the LUA5.1 version.
pushd ${BUILD_DIR}/lua5.1/build_requirements
rm -f luaopenocd/lua5.1-luaopenocd-*.xml
PATH=${TOOLS_PATH} cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DBUILDCFG_LUA_VERSION="5.1" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make
${JONCHKI} install-dependencies --verbose ${JONCHKI_VERBOSE} --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies luaopenocd/lua5.1-luaopenocd-*.xml
popd


# Build the LUA5.1 version.
pushd ${BUILD_DIR}/lua5.1
PATH=${TOOLS_PATH} cmake -DBUILDCFG_LUA_USE_SYSTEM="OFF" -DBUILDCFG_LUA_VERSION="5.1" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make pack
popd


# Get the build requirements for the LUA5.2 version.
pushd ${BUILD_DIR}/lua5.2/build_requirements
rm -f luaopenocd/lua5.2-luaopenocd-*.xml
PATH=${TOOLS_PATH} cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DBUILDCFG_LUA_VERSION="5.2" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make
${JONCHKI} install-dependencies --verbose ${JONCHKI_VERBOSE} --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies luaopenocd/lua5.2-luaopenocd-*.xml
popd

# Build the LUA5.2 version.
pushd ${BUILD_DIR}/lua5.2
PATH=${TOOLS_PATH} cmake -DBUILDCFG_LUA_USE_SYSTEM="OFF" -DBUILDCFG_LUA_VERSION="5.2" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make pack
popd


# Get the build requirements for the LUA5.3 version.
pushd ${BUILD_DIR}/lua5.3/build_requirements
rm -f luaopenocd/lua5.3-luaopenocd-*.xml
PATH=${TOOLS_PATH} cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DBUILDCFG_LUA_VERSION="5.3" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make
${JONCHKI} install-dependencies --verbose ${JONCHKI_VERBOSE} --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies luaopenocd/lua5.3-luaopenocd-*.xml
popd

# Build the LUA5.3 version.
pushd ${BUILD_DIR}/lua5.3
PATH=${TOOLS_PATH} cmake -DBUILDCFG_LUA_USE_SYSTEM="OFF" -DBUILDCFG_LUA_VERSION="5.3" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
PATH=${TOOLS_PATH} make pack
popd
